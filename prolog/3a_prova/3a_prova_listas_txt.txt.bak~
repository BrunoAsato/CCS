<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="114" xmlns:dc="http://purl.org/dc/elements/1.1/" fileformat="1.1" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="2.6.4" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:pt-BR; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="dc.format">application/x-abiword</m>
<m key="abiword.generator">AbiWord</m>
</metadata>
<history version="1" edit-time="299" last-saved="1254879146" uid="df133316-b2e0-11de-8e1d-fc82fc3f71c5">
<version id="1" started="1254879146" uid="44fdd12c-b2e1-11de-8e1d-fc82fc3f71c5" auto="0" top-xid="0"/>
</history>
<styles>
<s type="P" name="Normal" basedon="" followedby="Current Settings" props="font-family:Times New Roman; margin-top:0pt; font-variant:normal; margin-left:0pt; text-indent:0in; widows:2; font-style:normal; font-weight:normal; text-decoration:none; color:000000; line-height:1.0; text-align:left; margin-bottom:0pt; text-position:normal; margin-right:0pt; bgcolor:transparent; font-size:12pt; font-stretch:normal"/>
<s type="C" name="Reference" props="font-size:10pt"/>
</styles>
<pagesize pagetype="A4" orientation="portrait" width="8.267717" height="11.692913" units="in" page-scale="1.000000"/>
<section xid="1">
<p style="Normal" xid="2" props="text-align:left; dom-dir:ltr">3a. Prova de IA -  Listas e Functores -  2a. Parte - 28/09</p>
<p style="Normal" xid="3"><c></c></p>
<p style="Normal" xid="4" props="text-align:left; dom-dir:ltr">IP da prova:  200.19.107.44/boca</p>
<p style="Normal" xid="5" props="text-align:left; dom-dir:ltr">Aquecimento individual ou no máximo dois alunos</p>
<p style="Normal" xid="6"><c></c></p>
<p style="Normal" xid="7" props="text-align:left; dom-dir:ltr">1. Atenção aos nomes dos predicados submetidos, aridade e ordem dos</p>
<p style="Normal" xid="8" props="text-align:left; dom-dir:ltr">argumentos.  Siga exatamente os protótipos.</p>
<p style="Normal" xid="9" props="text-align:left; dom-dir:ltr">2. Cuidar na formatação. Esta é exatamente a dos exemplos.</p>
<p style="Normal" xid="10" props="text-align:left; dom-dir:ltr">3. Não há penalizações por submissões erradas.</p>
<p style="Normal" xid="11" props="text-align:left; dom-dir:ltr">4. Ao testarem as questões, adcionem os testes e resultados dentro de /* comentários */  no arquivo da submissão</p>
<p style="Normal" xid="12"><c></c></p>
<p style="Normal" xid="13"><c></c></p>
<p style="Normal" xid="14" props="text-align:justify; dom-dir:ltr">1.  Implemente um predicado que realize uma ação de um filtro no termo central, o do meio,  de uma tupla-3 (functor) em uma lista de tupla-3. <c props="font-family:Times New Roman; font-size:12pt; color:000000; text-decoration:none; text-position:normal; font-weight:normal; font-style:normal; lang:pt-BR">Veja e  siga os exemplos.</c></p>
<p style="Normal" xid="15" props="text-align:justify; dom-dir:ltr">Protótipo do predicado: filtro_1(L,  X)</p>
<p style="Normal" xid="16"><c></c></p>
<p style="Normal" xid="17" props="text-align:left; dom-dir:ltr">Exemplos de I/O:</p>
<p style="Normal" xid="18" props="text-align:left; dom-dir:ltr">?- filtro_1([ (3, a, 3), (4, b, 4), (5, c, 5)], X).</p>
<p style="Normal" xid="19" props="text-align:left; dom-dir:ltr">X = [a, b, c].</p>
<p style="Normal" xid="20" props="text-align:left; dom-dir:ltr">?- filtro_1([ (3, a, 3), (4, b, 4)],  X).</p>
<p style="Normal" xid="21" props="text-align:left; dom-dir:ltr">X = [a, b].</p>
<p style="Normal" xid="22" props="text-align:left; dom-dir:ltr">?- filtro_1([],  X).</p>
<p style="Normal" xid="23" props="text-align:left; dom-dir:ltr">X = [].</p>
<p style="Normal" xid="24" props="text-align:left; dom-dir:ltr">Grau de dificuldade: fácil</p>
<p style="Normal" xid="25"><c></c></p>
<p style="Normal" xid="26" props="text-align:justify; dom-dir:ltr">2. Implemente um predicado que  construa uma lista de tuplas, a cada 3 átomos a lista.  Caso o tamanho da lista  não seja um múltiplo de 3, preencher como * e #, conforme  os exemplos. Sobrando 2, ponha o '*' no centro, caso sobre 1 ponha '#' na primeira e terceira posição da tupla. <c props="font-family:Times New Roman; font-size:12pt; color:000000; text-decoration:none; text-position:normal; font-weight:normal; font-style:normal; lang:pt-BR">Veja e  siga os exemplos.</c></p>
<p style="Normal" xid="27" props="text-align:justify; dom-dir:ltr">Protótipo do predicado: monta_1(L1,L2)</p>
<p style="Normal" xid="28"><c></c></p>
<p style="Normal" xid="29" props="text-align:left; dom-dir:ltr">Exemplos de I/O:</p>
<p style="Normal" xid="30" props="text-align:left; dom-dir:ltr">X = [ (a, b, c), (1, 2, 3), (4, *, 5)]  ==&gt; sobraram 2</p>
<p style="Normal" xid="31" props="text-align:left; dom-dir:ltr">?- monta_1([a,b,c, 1,2,3,4],X).</p>
<p style="Normal" xid="32" props="text-align:left; dom-dir:ltr">X = [ (a, b, c), (1, 2, 3), (#, 4, #)] .  ==&gt; sobrou 1</p>
<p style="Normal" xid="33" props="text-align:left; dom-dir:ltr">?- monta_1([a,b,c, 1,2,3],X).</p>
<p style="Normal" xid="34" props="text-align:left; dom-dir:ltr">X = [ (a, b, c), (1, 2, 3)] .</p>
<p style="Normal" xid="35" props="text-align:left; dom-dir:ltr">?- monta_1([],X).</p>
<p style="Normal" xid="36" props="text-align:left; dom-dir:ltr">X = []</p>
<p style="Normal" xid="37" props="text-align:left; dom-dir:ltr">Grau de dificuldade: fácil</p>
<p style="Normal" xid="38"><c></c></p>
<p style="Normal" xid="39" props="text-align:justify; dom-dir:ltr">3. Implemente um predicado que gere uma lista numérica de 1 a N. Onde N &gt;= 0, ou seja, não há negativos.  Veja e  siga os exemplos.</p>
<p style="Normal" xid="40" props="text-align:justify; dom-dir:ltr">Protótipo do predicado: monta_N(N,L)</p>
<p style="Normal" xid="41"><c></c></p>
<p style="Normal" xid="42" props="text-align:left; dom-dir:ltr">Exemplos de I/O:</p>
<p style="Normal" xid="43" props="text-align:left; dom-dir:ltr">?- monta_N(8,X).</p>
<p style="Normal" xid="44" props="text-align:left; dom-dir:ltr">X = [1, 2, 3, 4, 5, 6, 7, 8].</p>
<p style="Normal" xid="45" props="text-align:left; dom-dir:ltr">?- monta_N(0,X).</p>
<p style="Normal" xid="46" props="text-align:left; dom-dir:ltr">X = [].</p>
<p style="Normal" xid="47" props="text-align:left; dom-dir:ltr">Grau de dificuldade: fácil</p>
<p style="Normal" xid="48"><c></c></p>
<p style="Normal" xid="49" props="text-align:justify; dom-dir:ltr">4. Implemente um predicado que realize um filtro em  uma lista de tupla-2, selecionando apenas o par  correspondente dos termos que  X  aparece em L. Ou na primeira parte ou na segunda parte. Veja os exemplos.</p>
<p style="Normal" xid="50" props="text-align:left; dom-dir:ltr"> Protótipo do predicado: filtro_2( X , L1, L2).</p>
<p style="Normal" xid="51"><c></c></p>
<p style="Normal" xid="52" props="text-align:left; dom-dir:ltr">Exemplos de I/O:</p>
<p style="Normal" xid="53" props="text-align:left; dom-dir:ltr">?- filtro_2(2, [(1,2),(b,2), (2,4),(2,x)], L).</p>
<p style="Normal" xid="54" props="text-align:left; dom-dir:ltr">L = [1, b, 4, x] .</p>
<p style="Normal" xid="55" props="text-align:left; dom-dir:ltr">?- filtro_2(2, [(1,12),(b,12), (12,4),(12,x)], L).</p>
<p style="Normal" xid="56" props="text-align:left; dom-dir:ltr">L = [] .</p>
<p style="Normal" xid="57" props="text-align:left; dom-dir:ltr">?- filtro_2(2, [], L).</p>
<p style="Normal" xid="58" props="text-align:left; dom-dir:ltr">L = [] .</p>
<p style="Normal" xid="59" props="text-align:left; dom-dir:ltr">Grau de dificuldade: fácil</p>
<p style="Normal" xid="60"><c></c></p>
<p style="Normal" xid="61" props="text-align:justify; dom-dir:ltr">5. Implemente um predicado que construa uma lista de pares. O tamanho da lista resultante, será dada pelo menor tamanho das duas listas de entrada: L1 e L2.</p>
<p style="Normal" xid="62" props="text-align:justify; dom-dir:ltr">Veja os exemplos.</p>
<p style="Normal" xid="63" props="text-align:left; dom-dir:ltr">Protótipo do predicado:  monta_dupla( L1, L2, L3).</p>
<p style="Normal" xid="64"><c></c></p>
<p style="Normal" xid="65" props="text-align:left; dom-dir:ltr">Exemplos de I/O:</p>
<p style="Normal" xid="66" props="text-align:left; dom-dir:ltr">?- monta_dupla([1,2,3,4,45],[a,b,c,d,e,f,h], X).</p>
<p style="Normal" xid="67" props="text-align:left; dom-dir:ltr">X = [ (1, a), (2, b), (3, c), (4, d), (45, e)].</p>
<p style="Normal" xid="68" props="text-align:left; dom-dir:ltr">?- monta_dupla([1,2,3,4,45],[], X).</p>
<p style="Normal" xid="69" props="text-align:left; dom-dir:ltr">X = [].</p>
<p style="Normal" xid="70" props="text-align:left; dom-dir:ltr">?- monta_dupla([1,2,3,4,45],[a,b,c], X).</p>
<p style="Normal" xid="71" props="text-align:left; dom-dir:ltr">X = [ (1, a), (2, b), (3, c)] .</p>
<p style="Normal" xid="72" props="text-align:left; dom-dir:ltr">Grau de dificuldade: fácil</p>
<p style="Normal" xid="73"><c></c></p>
<p style="Normal" xid="74" props="text-align:left; dom-dir:ltr">6. Implemente um predicado que construa uma lista de lista, contendo o seu tamanho descrescente, com o respectivo número n vezes. Caso N=0, retorne lista vazia.</p>
<p style="Normal" xid="75" props="text-align:left; dom-dir:ltr">Protótipo do predicado:  num_l(N,L).</p>
<p style="Normal" xid="76"><c></c></p>
<p style="Normal" xid="77" props="text-align:left; dom-dir:ltr">Exemplos de I/O:</p>
<p style="Normal" xid="78" props="text-align:left; dom-dir:ltr">?- num_l(7,X).</p>
<p style="Normal" xid="79" props="text-align:left; dom-dir:ltr">X = [[7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]].</p>
<p style="Normal" xid="80" props="text-align:left; dom-dir:ltr">?- num_l(2,X).</p>
<p style="Normal" xid="81" props="text-align:left; dom-dir:ltr">X = [[2, 2], [1]].</p>
<p style="Normal" xid="82" props="text-align:left; dom-dir:ltr">Dificuldade: médio</p>
<p style="Normal" xid="83"><c></c></p>
<p style="Normal" xid="84"><c></c></p>
<p style="Normal" xid="85" props="text-align:left; dom-dir:ltr">7. Implemente um predicado que transforme várias sub-listas, em um única lista "achatada".</p>
<p style="Normal" xid="86" props="text-align:left; dom-dir:ltr">Protótipo do predicado: achata(X,Y)</p>
<p style="Normal" xid="87"><c></c></p>
<p style="Normal" xid="88" props="text-align:left; dom-dir:ltr">Exemplos de I/O, vale  "achata(X,Y)":</p>
<p style="Normal" xid="89" props="text-align:left; dom-dir:ltr">?- num_l(7,X), achata(X,Y).</p>
<p style="Normal" xid="90" props="text-align:left; dom-dir:ltr">X = [[7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]],</p>
<p style="Normal" xid="91" props="text-align:left; dom-dir:ltr">Y = [7, 7, 7, 7, 7, 7, 7, 6, 6|...].</p>
<p style="Normal" xid="92" props="text-align:left; dom-dir:ltr">?- num_l(3,X), achata(X,Y).</p>
<p style="Normal" xid="93" props="text-align:left; dom-dir:ltr">X = [[3, 3, 3], [2, 2], [1]],</p>
<p style="Normal" xid="94" props="text-align:left; dom-dir:ltr">Y = [3, 3, 3, 2, 2, 1].</p>
<p style="Normal" xid="95" props="text-align:left; dom-dir:ltr">?- num_l(0,X), achata(X,Y).</p>
<p style="Normal" xid="96" props="text-align:left; dom-dir:ltr">X = [],</p>
<p style="Normal" xid="97" props="text-align:left; dom-dir:ltr">Y = [] .</p>
<p style="Normal" xid="98" props="text-align:left; dom-dir:ltr">Grau de dificuldade: fácil, mas tem que pensar um pouco</p>
<p style="Normal" xid="99"><c></c></p>
<p style="Normal" xid="100"><c></c></p>
<p style="Normal" xid="101" props="text-align:left; dom-dir:ltr">8. Implemente um predicado que transforme os termos de uma lista, em uma </p>
<p style="Normal" xid="102" props="text-align:left; dom-dir:ltr"> lista de tuplas-3, com o símbolo '#' como sendo o termo do meio da tripla. Veja os exemplos.</p>
<p style="Normal" xid="103" props="text-align:left; dom-dir:ltr">Protótipo do predicado: duplica_x(L1,L2)</p>
<p style="Normal" xid="104"><c></c></p>
<p style="Normal" xid="105" props="text-align:left; dom-dir:ltr">Exemplos de I/O:</p>
<p style="Normal" xid="106" props="text-align:left; dom-dir:ltr">?- duplica_x([3,4,5],X).</p>
<p style="Normal" xid="107" props="text-align:left; dom-dir:ltr">X = [ (3, #, 3), (4, #, 4), (5, #, 5)].</p>
<p style="Normal" xid="108" props="text-align:left; dom-dir:ltr">?- duplica_x([],X).</p>
<p style="Normal" xid="109" props="text-align:left; dom-dir:ltr">X = [].</p>
<p style="Normal" xid="110" props="text-align:left; dom-dir:ltr">Grau de dificuldade: fácil</p>
<p style="Normal" xid="111"><c></c></p>
<p style="Normal" xid="112" props="text-align:left; dom-dir:ltr">Boa sorte.</p>
<p style="Normal" xid="113"><c></c></p>
<p style="Normal" xid="114"></p>
</section>
</abiword>

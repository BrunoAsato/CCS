include "nvalue.mzn";
include "order_fn.mzn";
include "vertex_set_fn.mzn";
include "is_adj_matrix_square.mzn";

function array[int] of var int: vertex_colouring(array[int,int] of bool: graph, var int: n) =
let {
  set of int: V = vertex_set(graph);
  array[V] of var 1..order(graph): colours;

  constraint is_adj_matrix_square(graph);
  constraint assert(dom(n) = 1..order(graph), "The domain of the number of colours must be [1..order(graph)]", true);

  constraint forall(u, v in V, where graph[u,v] == true) (colours[u] != colours[v]);
  constraint nvalue(n, colours);
} in colours;

function array[int] of var int: vertex_colouring(array[int,int] of int: graph, var int: n) =
let {
  set of int: V = vertex_set(graph);
  array[V] of var 1..order(graph): colours;

  constraint is_adj_matrix_square(graph);
  constraint assert(dom(n) = 1..order(graph), "The domain of the number of colours must be [1..order(graph)]", true);

  constraint forall(u, v in V, where graph[u,v] != 0) (colours[u] != colours[v]);
  constraint nvalue(n, colours);
} in colours;